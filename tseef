Date: April 14, 2025

Dear AWS Architecture Team [Or Specific Name(s)],

Our organization recently received approval for an architecture pattern designed to provide centralized access to AWS Bedrock services from our member accounts. We understand the proposed flow is:

Member Accounts -> Account 'A' (Central Hub) -> API Gateway -> ALB/NLB -> ECS Cluster -> PrivateLink -> AWS Bedrock

We appreciate the benefits this pattern offers, such as centralized governance, security controls via PrivateLink, and the potential to embed custom logic or cost tracking within the ECS layer in Account 'A'.

As we move towards implementation, further analysis and review (including discussions regarding specific Bedrock features like streaming) have raised some concerns about whether this architecture will effectively support all potential Bedrock use cases, particularly some of the more advanced or latency-sensitive ones. We are seeking clarification on these points to ensure we build a robust and scalable solution.

Our specific areas of concern include:

Streaming Responses / Server-Sent Events (SSE):

Bedrock's InvokeModelWithResponseStream is crucial for interactive LLM experiences. Delivering these streams effectively through the multiple hops (API GW -> LB -> ECS -> Bedrock -> ECS -> LB -> API GW) seems complex.
API Gateway Timeouts: Standard API Gateway integration timeouts (especially the 29/30-second limits) appear incompatible with potentially long-lived streaming connections required for SSE or lengthy model responses, unless specific configurations or exceptions (like the potential REST API timeout increase via support request) are assumed.
Buffering: Potential for buffering within API Gateway, the Load Balancer (especially ALB), or the ECS application itself could negate the benefits of streaming.
SSE Support: Our understanding is that API Gateway does not natively support Server-Sent Events (SSE), which might be a desired delivery mechanism for streaming use cases.
Latency: Each component in the chain (API Gateway, LB, ECS processing) introduces latency. For real-time or highly interactive Bedrock use cases, this accumulated latency might be prohibitive compared to more direct access patterns.

Asynchronous Bedrock Operations: Use cases like initiating and monitoring Bedrock model fine-tuning jobs are asynchronous. The synchronous request/response nature of the API Gateway -> ECS flow doesn't seem well-suited for managing these long-running tasks without significant additional complexity (e.g., triggering Step Functions or background tasks from ECS).

Full Bedrock API Feature Parity: The ECS application becomes responsible for correctly proxying all necessary Bedrock API actions and parameters. This requires ongoing maintenance to support new Bedrock features, models, or API changes.

Complexity and Cost: This architecture introduces significant operational overhead and infrastructure costs (API GW, LB, ECS compute, data transfer) compared to potentially simpler alternatives like direct PrivateLink access from member accounts governed by IAM/SCPs.

Given these points, could you please provide clarification on the following:

Were these limitations, particularly regarding streaming/SSE and asynchronous operations, considered during the architecture approval?
Are there specific configurations or implementation patterns assumed within the approved architecture (e.g., for API Gateway, Load Balancer timeouts, ECS stream handling) that mitigate these concerns?
How is it envisioned that long-running asynchronous tasks like model fine-tuning would be managed within this pattern?
Considering these potential challenges, does the team still recommend this specific pattern as the universal standard for all Bedrock access, or should alternative patterns (like direct PrivateLink access or Lambda Function URLs for streaming) be considered for specific use cases?
We want to ensure we are aligned with AWS best practices and implement a solution that meets the full spectrum of our organization's potential Bedrock needs effectively. We appreciate your guidance and are available to discuss this further at your convenience.

Thank you for your time and support.

Sincerely,

[Your Name] [Your Title/Team] [Your Organization/Department] [Contact Information - Optional]

Collaborate on a document, app, or protoype for this with Canvas
Try now

profile picture
Generate Audio Overview
